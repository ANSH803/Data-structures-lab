#include<stdio.h>
#include<malloc.h>
struct node{
    struct node *prev;
    int data;
    struct node *next;
};
struct node *start=NULL;
struct node *create(struct node *);
struct node *display(struct node *);
struct node *insert_beg(struct node *);
struct node *insert_end(struct node *);
struct node *insert_before(struct node *);
struct node *insert_after(struct node *);
struct node *delete_beg(struct node *);
struct node *delete_end(struct node *);
struct node *delete_before(struct node *);
struct node *delete_after(struct node *);
struct node *delete_list(struct node *);
struct node *del(struct node *);
int main(){
    int opt;
    do{
        printf("\nChoose option:");
        printf("\n1.create a list");
        printf("\n2.display the list");
        printf("\n3.Add a node at the beginning");
        printf("\n4.Add a node at the end");
        printf("\n5.Add a node before a given node");
        printf("\n6.Add a node after a given node");
        printf("\n7.Delete a node from beginning");
        printf("\n8.Delete a node from end");
        printf("\n9.Delete a node before a given node");
        printf("\n10.Delete a node after a given node");
        printf("\n11.Delete the whole list");
        printf("\n12.Delete a specific element");
        printf("\n13.EXIT");
        printf("\nEnter your choice:");
        scanf("%d",&opt);
        switch(opt){
            case 1:start=create(start);
            printf("Doubly Linked List Created!");
            break;
            case 2:start=display(start);
            break;
            case 3:start=insert_beg(start);
            break;
            case 4:start=insert_end(start);
            break;
            case 5:start=insert_before(start);
            break;
            case 6:start=insert_after(start);
            break;
            case 7:start=delete_beg(start);
            break;
            case 8:start=delete_end(start);
            break;
            case 9:start=delete_before(start);
            break;
            case 10:start=delete_after(start);
            break;
            case 11:start:delete_list(start);
            printf("Doubly Linked List Deleted!");
            break;
            case 12:start=del(start);
            break;
        }
    }while(opt!=13);
    return 0;
}
struct node *create(struct node *start){
    struct node *new_node,*ptr;
    int num;
    printf("Enter -1 to end");
    printf("\nEnter the data");
    scanf("%d",&num);
    while(num!=-1){
        if(start==NULL){
            new_node=(struct node *)malloc(sizeof(struct node));
            new_node->prev=NULL;
            new_node->data=num;
            new_node->next=NULL;
            start=new_node;
        }
        else{
            ptr=start;
            new_node=(struct node *)malloc(sizeof(struct node));
            new_node->data=num;
            while(ptr->next!=NULL)
                ptr=ptr->next;
            ptr->next=new_node;
            new_node->prev=ptr;
            new_node->next=NULL;
        }
        printf("Enter the data:");
        scanf("%d",&num);
    }
    return start;
}
struct node *display(struct node *start){
    struct node *ptr;
    ptr=start;
    while(ptr!=NULL){
        printf("\t%d",ptr->data);
        ptr=ptr->next;
    }
    return start;
}
struct node *insert_beg(struct node *start){
    struct node *new_node;
    int num;
    printf("Enter the data:");
    scanf("%d",&num);
    new_node=(struct node *)malloc(sizeof(struct node));
    new_node->data=num;
    start->prev=new_node;
    new_node->prev=NULL;
    new_node->next=start;
    start=new_node;
    return start;
}
struct node *insert_end(struct node *start){
    struct node *ptr,*new_node;
    int num;
    printf("Enter the data:");
    scanf("%d",&num);
    new_node=(struct node *)malloc(sizeof(struct node));
    new_node->data=num;
    ptr=start;
    while(ptr->next!=NULL){
        ptr=ptr->next;
    }
    ptr->next=new_node;
    new_node->prev=ptr;
    new_node->next=NULL;
    return start;
}
struct node *insert_before(struct node *start){
    struct node *ptr,*new_node;
    int num,val;
    printf("Enter the data:");
    scanf("%d",&num);
    printf("Enter the value before which the value has to be added:");
    scanf("%d",&val);
    new_node=(struct node *)malloc(sizeof(struct node));
    new_node->data=num;
    ptr=start;
    while(ptr->data!=val)
        ptr=ptr->next;
    new_node->next=ptr;
    new_node->prev=ptr->prev;
    ptr->prev->next=new_node;
    ptr->prev=new_node;
    return start;
}
struct node *insert_after(struct node *start){
    struct node *ptr,*new_node;
    int num,val;
    printf("Enter the data:");
    scanf("%d",&num);
    printf("Enter the value after which the value has to be added:");
    scanf("%d",&val);
    new_node=(struct node *)malloc(sizeof(struct node));
    new_node->data=num;
    ptr=start;
    while(ptr->data!=val)
        ptr=ptr->next;
    new_node->prev=ptr;
    new_node->next=ptr->next;
    ptr->next->prev=new_node;
    ptr->next=new_node;
    return start;
}
struct node *delete_beg(struct node *start){
    struct node *ptr;
    ptr=start;
    start=start->next;
    start->prev=NULL;
    free(ptr);
    return start;
}
struct node *delete_end(struct node *start){
    struct node *ptr;
    ptr=start;
    while(ptr->next!=NULL)
        ptr=ptr->next;
    ptr->prev->next=NULL;
    free(ptr);
    return start;
}
struct node *delete_after(struct node *start){
    struct node *ptr,*temp;
    int val;
    printf("Enter the value after which node has to be deleted:");
    scanf("%d",&val);
    ptr=start;
    while(ptr->data!=val)
        ptr=ptr->next;
    temp=ptr->next;
    ptr->next=temp->next;
    temp->next->prev=ptr;
    free(temp);
    return start;
}
struct node *del(struct node *start){
    struct node *temp;
	int ele;
    if(start==NULL)
    {
        printf("Empty List \n");
        return;
    }
	printf("Enter the element to be deleted\n");
	scanf("%d",&ele);
	temp=start;
	while(temp->data!=ele)
	{
		temp=temp->next;
		if(temp==NULL)
		{
		 printf("Element is not in the list\n");
		 break;
		}
	 }
	 if(temp==start)
	 {
		 start=start->next;
	 }
	 else if(temp->next==NULL)
	 {
			temp=temp->prev;
			temp->next=NULL;
	 }

	 else
	 {
		 temp->prev->next=temp->next;
		 temp->next->prev=temp->prev;
	 }
	 return start;
}
struct node *delete_before(struct node *start){
    struct node *ptr,*temp;
    int val;
    printf("Enter the value before which node has to be deleted:");
    scanf("%d",&val);
    ptr=start;
    while(ptr->data!=val)
        ptr=ptr->next;
    temp=ptr->prev;
    if(temp==start)
        start=delete_beg(start);
    else{
        ptr->prev=temp->prev;
        temp->prev->next=ptr;
    }
    free(temp);
    return start;
}
struct node *delete_list(struct node *start){
    
    while(start!=NULL){
        start=delete_beg(start);
    }
    return start;
}

