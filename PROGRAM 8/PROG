#include<stdio.h> #include<malloc.h> #include<stdlib.h> struct stack{
int data;
struct stack *next;
};
struct stack *top=NULL;
struct stack *push(struct stack *,int); struct stack *pop(struct stack *); struct stack *display(struct stack *); int main(){
int val,opt; do{
printf("\n1.PUSH\n2.POP\n3.DISPLAY\n4.EXIT"); printf("\nEnter your option:"); scanf("%d",&opt);
switch(opt){
case 1:printf("\nEnter the number to be added in the stack:"); scanf("%d",&val);
top=push(top,val); break;
case 2:top=pop(top); break;
case 3:top=display(top); break;
}
}while(opt!=4); return 0;
}
struct stack *push(struct stack *top,int val){
 
struct stack *ptr;
ptr=(struct stack *)malloc(sizeof(struct stack)); ptr->data=val;
if(top==NULL){
ptr->next=NULL; top=ptr;
}
else{
ptr->next=top; top=ptr;
}
return top;

}
struct stack *pop(struct stack *top){ struct stack *ptr;
ptr=top; if(top==NULL)
printf("\nStack Underflow!"); else{
top=top->next;
printf("Deleted value:%d",ptr->data); free(ptr);
}
return top;
}
struct stack *display(struct stack *top){ struct stack *ptr;
ptr=top; if(top==NULL)
printf("\nStack is empty!"); else{
 
while(ptr!=NULL){ printf("\n%d",ptr->data); ptr=ptr->next;
}

}
return top;

}
#include<stdio.h> #include<stdlib.h> struct node
{
int data;
struct node *next;
};
struct node *front; struct node *rear; void insert();
void delete(); void display(); void main ()
{
int choice; while(choice != 4)
{
printf("\n1.insert an element\n2.Delete an element\n3.Display the queue\n4.Exit\n"); printf("\nEnter your choice:");
scanf("%d",& choice); switch(choice)
{
case 1: insert(); break; case 2: delete(); break; case 3: display(); break;
 
case 4:
exit(0); break; default:
printf("\nEnter valid choice??\n");

}

}

}
void insert()
{
struct node *ptr; int item;

ptr = (struct node *) malloc (sizeof(struct node)); if(ptr == NULL)
{
printf("\nOVERFLOW\n"); return;
}
else
{
printf("\nEnter value:"); scanf("%d",&item);
ptr -> data = item; if(front == NULL)
{
front = ptr; rear = ptr;
front -> next = NULL; rear -> next = NULL;
}
 
else
{
rear -> next = ptr; rear = ptr;
rear->next = NULL;
}

}

}
void delete ()
{
struct node *ptr; if(front == NULL)
{
printf("\nUNDERFLOW\n"); return;
}
else
{
ptr = front;
printf("Deleted element:%d",ptr->data); front = front -> next;
free(ptr);
}


}
void display()
{
struct node *ptr; ptr = front; if(front == NULL)
{
 
printf("\nEmpty queue\n");

}
else
{
while(ptr != NULL)
{
printf("\n%d\n",ptr -> data); ptr = ptr -> next;
}
}

}



